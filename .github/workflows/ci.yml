---
name: CI
on:
  schedule:
    # run every Sunday to re-populate caches after they are cleaned on Saturday
    - cron: "0 12 * * 0"
  push:
    branches:
      - main
    tags:
      - v[0-9]+.[0-9]+.[0-9]+*
  pull_request:

jobs:
  test:
    name: Test
    timeout-minutes: 10

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout code
        uses: percona-platform/checkout@v2

#      # use full version while v2 is in beta
#      - name: Install Node.js ${{ matrix.node-version }}
#        uses: percona-platform/setup-node@v2.1.2
#        with:
#          node-version: ${{ matrix.node-version }}
#
#      - name: Enable node_modules cache
#        uses: percona-platform/cache@v2
#        with:
#          path: |
#            node_modules
#            */*/node_modules
#            ~/.npm
#          key: ${{ runner.os }}-node-${{ matrix.node-version }}-yarn-${{ hashFiles('**/yarn.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-node-${{ matrix.node-version }}-yarn-
#
#      - name: Install tools
#        run: make init
#
#      - name: Bootstrap projects
#        run: make bootstrap
#
#      - name: Build artifacts
#        run: make build
#
#      - name: Run tests
#        run: make test

  docker:
    name: Build Docker image
    timeout-minutes: 10
    needs: test

    outputs:
      tag: ${{ env.DOCKER_TAG }}

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - name: Checkout code
        uses: percona-platform/checkout@v2
#
#      # use full version while v2 is in beta
#      - name: Install Node.js ${{ matrix.node-version }}
#        uses: percona-platform/setup-node@v2.1.2
#        with:
#          node-version: ${{ matrix.node-version }}
#
#      - name: Enable node_modules cache
#        uses: percona-platform/cache@v2
#        with:
#          path: |
#            node_modules
#            */*/node_modules
#            ~/.npm
#          key: ${{ runner.os }}-node-${{ matrix.node-version }}-yarn-${{ hashFiles('**/yarn.lock') }}
#          restore-keys: |
#            ${{ runner.os }}-node-${{ matrix.node-version }}-yarn-
#
#      - name: Install tools
#        run: make init
#
#      - name: Enable experimental Docker features for --squash flag
#        run: sudo .github/workflows/enable-docker-experimental.sh
#
#      - name: Login in Docker registry
#        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login -u $GITHUB_ACTOR docker.pkg.github.com --password-stdin
#
#      - name: Extract Docker image tag
#        uses: percona-platform/extract-docker-tag-action@v1
#
#      - name: Bootstrap projects
#        run: make bootstrap
#
#      - name: Build artifacts
#        run: make build
#
#      - name: Build Docker image with tag "${{ env.DOCKER_TAG }}"
#        run: make docker-build
#
#      - name: Push Docker image
#        run: make docker-push

  e2e:
    name: Triggering Tests execution
    timeout-minutes: 10
#    needs: docker

    runs-on: ubuntu-latest

    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
          HEAD_REF: ${{ toJson(github.ref) }}
        run: |
          echo "$GITHUB_CONTEXT"
          echo "$HEAD_REF"

      - name: get the check run id and dispatch a workflow
        run: |
          CHECK_SUITE_URL=$(curl -H "authorization: token ${{ secrets.ROBOT_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{github.run_id}} | jq -r '.check_suite_url')
          echo suite url is $CHECK_SUITE_URL
          echo "HEAD_BRANCH=$(curl -H "authorization: token ${{ secrets.ROBOT_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{github.run_id}} | jq -r '.head_branch')" >> $GITHUB_ENV
          echo branch is ${{ env.HEAD_BRANCH}}
          echo "HEAD_SHA=$(curl -H "authorization: token ${{ secrets.ROBOT_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{github.run_id}} | jq -r '.head_sha')" >> $GITHUB_ENV
          echo sha is ${{ env.HEAD_SHA }}
          echo "CHECK_RUN_ID=$(curl -H "authorization: token ${{ secrets.ROBOT_TOKEN }}" $CHECK_SUITE_URL/check-runs | jq '.check_runs[] | .id ')" >> $GITHUB_ENV
          echo "CHECK_SUITE_URL=$CHECK_SUITE_URL" >> $GITHUB_ENV
          echo check_run_id is ${{ env.CHECK_RUN_ID }}
#      - name: get inputs for dispatch
#        run: |
#          CHECK_SUITE_URL=$(curl -H "authorization: token ${{ secrets.ROBOT_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{github.run_id}} | jq -r '.check_suite_url')
#          echo "CHECK_SUITE_URL is $CHECK_SUITE_URL "
#          HEAD_BRANCH=$(curl -H "authorization: token ${{ secrets.ROBOT_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{github.run_id}} | jq -r '.head_branch')
#          echo "HEAD_BRANCH is $HEAD_BRANCH"
#          HEAD_SHA=$(curl -H "authorization: token ${{ secrets.ROBOT_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/actions/runs/${{github.run_id}} | jq -r '.head_sha')
#          echo "HEAD_SHA is $HEAD_SHA"
#          CHECK_RUN_ID=$(curl -H "authorization: token ${{ secrets.ROBOT_TOKEN }}" $CHECK_SUITE_URL/check-runs | jq '.check_runs[] | .id ')
#          echo "CHECK_RUN_ID is $CHECK_RUN_ID"
#          echo "HEAD_BRANCH=${HEAD_BRANCH}" >> $GITHUB_ENV
#          echo "HEAD_SHA=${HEAD_SHA}" >> $GITHUB_ENV
#          echo "CHECK_RUN_ID=${CHECK_RUN_ID}" >> $GITHUB_ENV

      - name: dispatching tests workflow
        uses: percona-platform/workflow-dispatch@v1
        with:
          workflow: Tests
          repo: percona-platform/cicd
          token: ${{ secrets.ROBOT_TOKEN }}
          inputs: '{
              "branch": "${{ env.HEAD_BRANCH }}",
              "repo": "${{ github.repository }}",
              "run_id": "${{ env.CHECK_RUN_ID }}",
              "saas-ui": "${{ needs.docker.outputs.tag }}",
              "ui_tests_branch": "${{ env.HEAD_BRANCH }}",
              "sha": "${{ env.HEAD_SHA }}"
              }'

#
#      - name: Setup tmate session on failure
#        if: ${{ failure() }}
#        uses: percona-platform/action-tmate@v2
